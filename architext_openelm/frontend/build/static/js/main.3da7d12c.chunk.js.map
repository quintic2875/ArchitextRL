{"version":3,"sources":["index.tsx"],"names":["create_td_class","text","td","document","createElement","className","create_tr","tr","style","width","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","child","body","lastElementChild","removeChild","div","appendChild","key","args","num_cols","innerHTML","concat","head","imagesLoaded","table","row","i","innerText","_loop","_i","Math","floor","cell","img","src","length","title","onclick","setComponentValue","onload","setFrameHeight","setComponentReady"],"mappings":"kGAAA,kBAEA,SAASA,EAAgBC,GACrB,IAAIC,EAAKC,SAASC,cAAc,MAEhC,OADAF,EAAGG,UAAYJ,EACRC,CACX,CAEA,SAASI,IACL,IAAIC,EAAKJ,SAASC,cAAc,MAEhC,OADAG,EAAGC,MAAMC,MAAQ,OACVF,CACX,CA6GAG,IAAUC,OAAOC,iBAAiBF,IAAUG,cA3G5C,SAAkBC,GACd,IAAMC,EAAQD,EAAkCE,OAG5CC,EAAQd,SAASe,KAAKC,iBACtBF,GACAd,SAASe,KAAKE,YAAYH,GAI9B,IAAII,EAAMlB,SAASe,KAAKI,YAAYnB,SAASC,cAAc,QAC3D,IAAK,IAAImB,KAAOR,EAAKS,KAAgB,UACjCH,EAAIb,MAAMe,GAAcR,EAAKS,KAAgB,UAAED,GAGnD,IAAIE,EAAWV,EAAKS,KAAe,SAG/BhB,EAAQL,SAASC,cAAc,SACnCI,EAAMkB,UAAS,oJAAAC,OAKE,KAAOF,EAAW,GAAE,6HAAAE,OAKpB,KAAOF,EAAW,GAAE,4TAgBrCtB,SAASyB,KAAKN,YAAYd,GAG1B,IAAIqB,EAAe,EAGnBR,EAAIC,YAAYnB,SAASC,cAAc,UACvC,IAAI0B,EAAQT,EAAIF,iBAChB,IAAK,IAAII,KAAOR,EAAKS,KAAkB,YACnCM,EAAMtB,MAAMe,GAAcR,EAAKS,KAAkB,YAAED,GAKvDO,EAAMR,YAAYhB,KAClB,IAAIyB,EAAMD,EAAMX,iBAChBY,EAAIT,YAAYtB,EAAgB,cAChC,IAAK,IAAIgC,EAAI,EAAGA,EAAIP,EAAUO,IAAK,CAC/BD,EAAIT,YAAYtB,EAAgB,cACrB+B,EAAIZ,iBACVc,UAAYlB,EAAKS,KAAiB,WAAEQ,EAC7C,CAGA,IADA,IAAAE,EAAA,SAAAC,GAEI,GAAIH,EAAIP,IAAa,EAAG,CACpB,IAAIvB,EAAKF,EAAgB,QACzBE,EAAG+B,UAAYlB,EAAKS,KAAiB,WAAEY,KAAKC,MAAML,EAAIP,IAEtDK,EAAMR,YAAYhB,KAAagB,YAAYpB,EAC/C,CACA,IAAI6B,EAAMD,EAAMX,iBAChBY,EAAIT,YAAYtB,EAAgB,SAChC,IAAIsC,EAAOP,EAAIZ,iBACfmB,EAAKhB,YAAYnB,SAASC,cAAc,QACxC,IAAImC,EAAMD,EAAKnB,iBACf,IAAK,IAAII,KAAOR,EAAKS,KAAgB,UACjCe,EAAI/B,MAAMe,GAAcR,EAAKS,KAAgB,UAAED,GAInDgB,EAAIlC,UAAY2B,GAAKjB,EAAKS,KAAe,SAAI,WAAa,aAE1De,EAAIC,IAAMzB,EAAKS,KAAY,MAAEQ,GACzBjB,EAAKS,KAAa,OAAEiB,OAAST,IAC7BO,EAAIG,MAAQ3B,EAAKS,KAAa,OAAEQ,IAEpCO,EAAII,QAAU,WACVjC,IAAUkC,kBAAkBZ,EAChC,EAEAO,EAAIM,OAAS,aACThB,IACqBd,EAAKS,KAAY,MAAEiB,QACpC/B,IAAUoC,gBAElB,CACJ,EAjCSd,EAAI,EAAGA,EAAIjB,EAAKS,KAAY,MAAEiB,OAAQT,IAAGE,EAAAC,EAoCtD,IAGAzB,IAAUqC,mB","file":"static/js/main.3da7d12c.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\nfunction create_td_class(text: string): HTMLTableDataCellElement {\n    let td = document.createElement(\"td\")\n    td.className = text\n    return td\n}\n\nfunction create_tr(): HTMLTableRowElement {\n    let tr = document.createElement(\"tr\")\n    tr.style.width = \"100%\"\n    return tr\n}\n\nfunction onRender(event: Event): void {\n    const data = (event as CustomEvent<RenderData>).detail\n\n    // Remove existing content\n    let child = document.body.lastElementChild;\n    if (child) {\n        document.body.removeChild(child)\n    }\n\n    // Add style the image container\n    let div = document.body.appendChild(document.createElement(\"div\"))\n    for (let key in data.args[\"div_style\"]) {\n        div.style[key as any] = data.args[\"div_style\"][key]\n    }\n\n    let num_cols = data.args[\"num_cols\"]\n\n    // Create css style for row_label and cell\n    let style = document.createElement(\"style\")\n    style.innerHTML = `\n        .row_label {\n            font-weight: bold;\n            text-align: center;\n            vertical-align: middle;\n            width: ${100 / (num_cols + 1)}%;\n        }\n        .cell {\n            text-align: center;\n            vertical-align: middle;\n            width: ${100 / (num_cols + 1)}%;\n        }\n        img {\n            max-width: 100%;\n            max-height: 100%;\n            display: block;\n            margin: 0 auto;\n        }\n        img.selected{\n            border: 2px solid blue;\n        }\n        img.unselected{\n            border: 1px solid black;\n        }\n}\n    `\n    document.head.appendChild(style)\n\n    // Add and style all images\n    let imagesLoaded = 0\n\n    // Create a table of images loaded from data.args[\"paths\"] with 5 columns\n    div.appendChild(document.createElement(\"table\"))\n    let table = div.lastElementChild as HTMLTableElement\n    for (let key in data.args[\"table_style\"]) {\n        table.style[key as any] = data.args[\"table_style\"][key]\n    }\n\n\n    // Add column names\n    table.appendChild(create_tr())\n    let row = table.lastElementChild as HTMLTableRowElement\n    row.appendChild(create_td_class(\"row_label\"))\n    for (let i = 0; i < num_cols; i++) {\n        row.appendChild(create_td_class(\"row_label\"))\n        let cell = row.lastElementChild as HTMLTableCellElement\n        cell.innerText = data.args[\"col_labels\"][i]\n    }\n\n    // Form the table by adding images\n    for (let i = 0; i < data.args[\"paths\"].length; i++) {\n        if (i % num_cols === 0) {\n            let td = create_td_class(\"cell\")\n            td.innerText = data.args[\"row_labels\"][Math.floor(i / num_cols)]\n\n            table.appendChild(create_tr()).appendChild(td)\n        }\n        let row = table.lastElementChild as HTMLTableRowElement\n        row.appendChild(create_td_class(\"cell\"))\n        let cell = row.lastElementChild as HTMLTableCellElement\n        cell.appendChild(document.createElement(\"img\"))\n        let img = cell.lastElementChild as HTMLImageElement\n        for (let key in data.args[\"img_style\"]) {\n            img.style[key as any] = data.args[\"img_style\"][key]\n        }\n\n        // Highlight the selected image\n        img.className = i == data.args[\"selected\"] ? \"selected\" : \"unselected\"\n\n        img.src = data.args[\"paths\"][i]\n        if (data.args[\"titles\"].length > i) {\n            img.title = data.args[\"titles\"][i]\n        }\n        img.onclick = function (): void {\n            Streamlit.setComponentValue(i)\n        }\n        // eslint-disable-next-line\n        img.onload = function (): void {\n            imagesLoaded++\n            if (imagesLoaded === data.args[\"paths\"].length) {\n                Streamlit.setFrameHeight()\n            }\n        }\n    }\n\n\n}\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\nStreamlit.setComponentReady()"],"sourceRoot":""}